@page "/blackjack"
@using JankenGame.Models.BlackJack
@using JankenGame.Services.BlackJack
@rendermode InteractiveServer

<h3>ブラックジャック</h3>

<div class="stats-board">
    <section class="player-stats">
        <h4>プレイヤー統計</h4>
        <p>勝利: @Player.Wins</p>
        <p>敗北: @Player.Losses</p>
        <p>引き分け: @Player.Draws</p>
        <p>総ゲーム数: @Player.TotalGames</p>
        <p>勝率: @Player.WinRate.ToString("F1")%</p>
    </section>

    <section class="dealer-stats">
        <h4>ディーラー統計</h4>
        <p>勝利: @Dealer.Wins</p>
        <p>敗北: @Dealer.Losses</p>
        <p>引き分け: @Dealer.Draws</p>
        <p>総ゲーム数: @Dealer.TotalGames</p>
        <p>勝率: @Dealer.WinRate.ToString("F1")%</p>
    </section>
</div>

<div class="game-board">
    <section>
        <h4>@Dealer.Name</h4>
        @foreach (var card in Dealer.Cards)
        {
            <div class="card">@card.Name</div>
        }     
        <p>スコア: @Dealer.Score</p>
    </section>

    <section>
        <h4>@Player.Name</h4>
        @foreach (var card in Player.Cards)
        {
            <div class="card">@card.Name</div>
        }
        <p>スコア: @Player.Score</p>
    </section>
</div>

<div class="controls">
    @if (!GameStarted)
    {
        <button @onclick="StartGame">ゲーム開始</button>
    }
    else if (IsPlayerTurn)
    {
        <button @onclick="Hit">ヒット</button>
        <button @onclick="Stand">スタンド</button>
    }
    else if (GameOver)
    {
        <p class="result">@ResultMessage</p>
        <button @onclick="Reset">リセット</button>
    }
    else
    {
        <p class="result">ディーラーのターン...</p>
    }
</div>

@code {
    BlackJackPlayer Player = null!;
    BlackJackGameService gameService = null!;

    protected override void OnInitialized()
    {
        gameService = new BlackJackGameService();
        
        Player = new BlackJackPlayer { Name = "あなた" };
        gameService.AddPlayer(Player);
    }

    BlackJackDealer Dealer => gameService.Dealer;
    bool GameStarted => gameService.GameState != BlackJackGameState.Waiting;
    bool GameOver => gameService.GameState == BlackJackGameState.GameOver;
    bool IsPlayerTurn => gameService.GameState == BlackJackGameState.PlayersTurn 
                         && gameService.CurrentPlayer == Player;
    string ResultMessage => GameOver ? gameService.GetResultMessage(Player) : "";

    void StartGame()
    {
        gameService.StartGame();
    }

    void Hit()
    {
        if (IsPlayerTurn)
        {
            gameService.Hit();
        }
    }

    void Stand()
    {
        if (IsPlayerTurn)
        {
            gameService.Stand();
        }
    }

    void Reset()
    {
        gameService.ResetGame();
    }
}
