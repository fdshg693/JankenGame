@page "/janken"
@using JankenGame.Models.Janken
@rendermode InteractiveServer
@inject JankenPlayerList jankenPlayers

<h3>じゃんけんゲーム</h3>

<label for="playerName">プレイヤー名:</label>
<input id="playerName" @bind="playerName" />
<button class="btn btn-primary" @onclick="() => jankenPlayers.ChangePlayerName(0, playerName)">名前を設定</button>
<p>こんにちは、@playerName さん</p>
<div class="choices">
	<button class="btn @(SelectedIndex == 0 ? "btn-primary" : "btn-secondary")" @onclick="() => SetHand(JankenHand.Rock)">✊  グー</button>
	<button class="btn @(SelectedIndex == 1 ? "btn-primary" : "btn-secondary")" @onclick="() => SetHand(JankenHand.Paper)">✋  パー</button>
	<button class="btn @(SelectedIndex == 2 ? "btn-primary" : "btn-secondary")" @onclick="() => SetHand(JankenHand.Scissors)">✌️  チョキ</button>
	<button class="btn @(clicked == true ? "btn-primary" : "btn-secondary")" @onclick="() => Judge()">手を決定</button>
	<button class="btn btn-secondary" @onclick="NewGame">リセット</button>
</div>

@if (clicked)
{
	<div class="result">
		<p>@jankenPlayers.ShowInfo()</p>
		<p>@OutcomeMessage</p>
	</div>
}

@if (RecentRecords.Any())
{
	<div class="container my-4 history">
		<h4 class="mb-3">直近の履歴（最大5件）</h4>

		<div class="row g-3">
			@foreach (var record in RecentRecords)
			{
				<!-- カードでレコードを表示 -->
				<div class="col-12 col-md-6 col-lg-4">
					<div class="card h-100 shadow-sm">
						<!-- ヘッダーにタイムスタンプ -->
						<div class="card-header bg-light">
							<small class="text-secondary">
								@record.Timestamp.ToString("yyyy/MM/dd HH:mm")
							</small>
						</div>

						<div class="card-body d-flex flex-column">
							<h5 class="card-title">勝者</h5>

							<!-- List group で勝者をリスト化 -->
							<ul class="list-group list-group-flush mb-3">
								@foreach (var winner in record.Winners)
								{
									<li class="list-group-item">
										<!-- バッジで強調表示 -->
										<span class="badge bg-primary me-2">Winner</span>
										@winner.Name
									</li>
								}
							</ul>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}

@code {
	int SelectedIndex;
	string OutcomeMessage = string.Empty;
	string playerName = string.Empty;
	int Player1Id;
	int Computer1Id;
	int Computer2Id;

	JankenRecordList RecordList = new JankenRecordList();
	Random rnd = new();
	bool clicked = false;
	bool _initialized = false;

	IEnumerable<JankenRecord> RecentRecords => RecordList.OrderByDescending(r => r.Timestamp).Take(5);

	protected override void OnInitialized()
	{
		if (!_initialized)
		{
			SelectedIndex = -1;
			playerName = "Player1";
			_initialized = true;
			Player1Id = jankenPlayers.GetPlayerUniqueId("Player1");
			Computer1Id = jankenPlayers.GetPlayerUniqueId("Computer1");
			Computer2Id = jankenPlayers.GetPlayerUniqueId("Computer2");
			_initialized = true;
		}
	}

	void SetHand(JankenHand jankenHand)
	{
		if (clicked) return;
		jankenPlayers.SetPlayerHand(Player1Id, jankenHand);
		SelectedIndex = (int)jankenHand;
	}

	// じゃんけんの結果を判定する
	async Task Judge()
	{
		if(SelectedIndex == -1)
		{
			OutcomeMessage = "手を選択してください。";
			return;
		}
		// クリックを一度だけ許可
		if (clicked) return; 
		clicked = true;
		
		//　コンピューターの手をランダムに決定
		var computer1Hand = (JankenHand)rnd.Next(0, 3);
		var computer2Hand = (JankenHand)rnd.Next(0, 3);		
		jankenPlayers.SetPlayerHand(Computer1Id, computer1Hand);
		jankenPlayers.SetPlayerHand(Computer2Id, computer2Hand);

		//　じゃんけんの結果を判定
		var winners = JankenLogic.DetermineWinner(jankenPlayers);
		SetOutcomeMessage(winners);
		RecordList.AddRecord(winners);

		//　勝敗結果を元に、メッセージを表示
		StateHasChanged();
		//　時間をおいてゲームの表示をリセット
		await ResetGameDisplay();
	}

	// 2秒後にゲームの表示を、試合の記録を除いてリセットする
	async Task ResetGameDisplay()
	{
		await Task.Delay(5000);
		clicked = false; // 5秒後にクリックを再度許可
		SelectedIndex = -1; //ボタン表示を元に戻す
		OutcomeMessage = ""; // メッセージを空にする
		jankenPlayers.RecreateSelf();
	}

	//　勝敗結果を元に、メッセージを表示
	void SetOutcomeMessage(List<JankenPlayer>? winners)
	{
		if (winners == null || winners.Count == 0)
		{
			OutcomeMessage = "引き分けです";
			return;
		}
		else
		{
			var winnersName = string.Join("、", winners.Select(w => w.Name));
			OutcomeMessage = $"{winnersName}の勝ちです！";
		}
	}

	// ゲームを全て初期化する
	void NewGame()
	{
		jankenPlayers.RecreateSelf();
		OutcomeMessage = "";
		RecordList.ClearRecords();
		SelectedIndex = -1;
	}
}
