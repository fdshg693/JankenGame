@page "/janken"
@using JankenGame.Models.Janken
@rendermode InteractiveServer

<h3>じゃんけんゲーム</h3>

<p>Player1</p>
<div class="choices">
    <button class="btn @(SelectedIndex == 0 ? "btn-primary" : "btn-secondary")" @onclick="() => SetHand(JankenHand.Rock)">✊  グー</button>
    <button class="btn @(SelectedIndex == 1 ? "btn-primary" : "btn-secondary")" @onclick="() => SetHand(JankenHand.Paper)">✋  パー</button>
    <button class="btn @(SelectedIndex == 2 ? "btn-primary" : "btn-secondary")" @onclick="() => SetHand(JankenHand.Scissors)">✌️  チョキ</button>
</div>
<button class="btn @(clicked == true ? "btn-primary" : "btn-secondar")" @onclick="() => Judge(Player1)">手を決定</button>
<button class="btn" @onclick="ResetGame">リセット</button>

@if (Player1.Hand != null && Computer.Hand != null)
{
    <div class="result">
        <p>あなた：@Player1.Hand?.GetDescription() → コンピューター：@Computer.Hand?.GetDescription()</p>
        <p>@OutcomeMessage</p>
        <p>＜現在のスコア＞ @RecordList.TotalWins　勝:  @RecordList.TotalLosses 敗:　@RecordList.TotalDraws 引き分け:</p>        
    </div>
}

@if (RecentRecords.Any())
{
    <div class="history">
        <h4>直近の履歴（最大5件）</h4>
        <ul>
            @foreach (var record in RecentRecords)
            {
                <li>
                    あなた：@record.PlayerHand.GetDescription() ／ コンピューター：@record.ComputerHand.GetDescription() → 結果：@record.Outcome.GetDescription()（@record.Timestamp.ToString("HH:mm:ss")）
                </li>
            }
        </ul>
    </div>
}

@code {
    int SelectedIndex = -1;
    string OutcomeMessage = "";

    JankenPlayer Player1 = new JankenPlayer();
    JankenPlayer Computer = new JankenPlayer();
    JankenRecordList RecordList = new JankenRecordList();
    Random rnd = new();
    bool clicked = false;

    IEnumerable<JankenRecord> RecentRecords => RecordList.OrderByDescending(r => r.Timestamp).Take(5);

    void SetHand(JankenHand jankenHand)
    {
        if (clicked) return;
        Player1.Hand = jankenHand;
        SelectedIndex = (int)jankenHand;
    }

    async Task Judge(JankenPlayer player)
    {
        if (clicked) return; // クリックを一度だけ許可
        clicked = true;
        
        Computer.Hand = (JankenHand)rnd.Next(0, 3);
        var result = JankenLogic.DetermineWinner(Player1, Computer);
        SetOutcomeMessage(result);
        RecordList.AddRecord(Player1.Hand, Computer.Hand, result);   
        
		//　勝敗結果を元に、メッセージを表示
        StateHasChanged();
		//　時間をおいてゲームの表示をリセット
        await ResetGameDisplay();
    }    

	// 2秒後にゲームの表示を、試合の記録を除いてリセットする
    async Task ResetGameDisplay()
    {        
        await Task.Delay(2000);
        clicked = false; // 2秒後にクリックを再度許可
        SelectedIndex = -1; //ボタン表示を元に戻す
        OutcomeMessage = "";
        Player1.Hand = null;
        Computer.Hand = null;
    }

    //　勝敗結果を元に、メッセージを表示
    void SetOutcomeMessage(JankenResult result)
    {
        switch (result)
        {
            case JankenResult.Win:
                OutcomeMessage = "あなたの勝ちです！";
                break;
            case JankenResult.Lose:
                OutcomeMessage = "あなたの負けです。";
                break;
            case JankenResult.Draw:
                OutcomeMessage = "引き分けです。";
                break;
            default:
                OutcomeMessage = "不明なエラーが発生しました。再度お試しください";
                break;
        }
    }

    // ゲームを全て初期化する
    void ResetGame()
    {
        Player1 = new JankenPlayer();
        Computer = new JankenPlayer();
        OutcomeMessage = "";
        RecordList.Clear();
        SelectedIndex = -1;
    }
}
